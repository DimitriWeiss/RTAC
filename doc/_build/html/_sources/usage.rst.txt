.. _usage:

Usage
=====

After you installed rtac, you need to provide data for the AC scenario to be complete.

* Problem instances.
* Target algorithm.
* A text file containing a defitionion of the scenario.
   * Hyperparameters that you want to adjust.
   * A dotted module path to the target algorithm wrapper.
   * The class name of the wrapper
   * An absolute path to the instance feature generator if you want to use instance features.
   * The class name of the feature generator.
   * An absolute path to a csv file containing instance features if you precomputed them and the instance feature generator only reads them in.
   * A text file with instance features to pre-train CPPL if you use CPPL.
   * An absolute path to a json or pcs file defining the parameter space of the target algorithm.
* Absolute paths to the problem instances to be solved.

You can read in the scenario with rtac.utils.read_io.read_args, initialize the RAC with rtac = rtac.rtac.rtac_factory and solve instances with rtac.solve_instance(instance).